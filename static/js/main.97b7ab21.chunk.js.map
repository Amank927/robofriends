{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","website","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","APP","onRequestRobot","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","fontFamily","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.97b7ab21.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n\nconst Card = ({name, email, website}) => {\n    return (\n        <div className='tc grow bg-light-green dib br3 pa3 ma2 bw2 shadow-5'>\n            <img alt=\"\" src={`https://robohash.org/${website}?200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i} \n                            name={robots[i].name} \n                            email={robots[i].email} \n                            website={robots[i].website}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input \n            className='pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots' \n            onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\n\nexport default Scroll;","import React from 'react';\n\n\n\nclass ErrorBoundary extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({\n            hasError: true\n        })\n    }\n    \n    render() {\n        if(this.state.hasError){\n            return (<h1>Oops. Something went wrong!</h1>);\n        }\n        else {\n            return this.props.children;\n        }\n        \n    }\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport { setSearchField, requestRobots } from '../actions';\n\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobot: () => dispatch(requestRobots())\n    }\n}\n\nclass APP extends React.Component{\n    componentDidMount() {\n        this.props.onRequestRobot();\n    }\n\n    render() {\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter(robot => {\n                return robot.name.toLowerCase().includes(\n                    searchField.toLowerCase()\n                );\n            })\n        if(isPending){\n            return <h1 className='tc' style={{fontFamily: \"SEGA LOGO FONT\"}}>Loading</h1>\n        }\n        else{\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>Robofriends</h1>\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(APP);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, \n         REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response=>response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, \n         REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILED } from './constants';\n\nconst initialStateSearch = {\n    searchField: '',\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    robots: [],\n    isPending: false,\n    error: \"\"\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport APP from './containers/App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\n\nconst logger = createLogger();\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunkMiddleware,logger))\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <APP />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}